/**
 * RoleController.groovy 
 * Actions over Authority objects.
 * @author generated by plugin script
 * @auther Haotian Sun
 */            
class RoleController {
    def index = { redirect(action:list,params:params) }

    // the delete, save and update actions only
    // accept POST requests
    def allowedMethods = [delete:'POST',
                          save:'POST',
                          update:'POST']

    def list = {
        if(!params.max)params.max = 10
        [ authorityList: Authority.list( params ) ]
    }

    def show = {
        [ authority : Authority.get( params.id ) ]
    }

    def delete = {
        def authority = Authority.get( params.id )
        String oldRole = authority.authority
        if(authority) {
         	def rms = Requestmap.findAllByConfigAttributeLike('%'+oldRole+'%')
         	rms.each{it.configAttribute=it.configAttribute.replace(oldRole,'');it.validate();}
            authority.delete()
            flash.message = "Authority ${params.id} deleted."
            redirect(action:list)
        }
        else {
            flash.message = "Authority not found with id ${params.id}"
            redirect(action:list)
        }
    }

    def edit = {
        def authority = Authority.get( params.id )
        if(!authority) {
                flash.message = "Authority not found with id ${params.id}"
                redirect(action:list)
        }
        else {
            return [ authority : authority ]
        }
    }

	/** Authority update action. when updating an existing authority instance, the requestmaps which contain
	 *  them should also be updated.
	 */
    def update = {
        def authority = Authority.get( params.id )
        String oldRole = authority.authority
        if(authority) {
             authority.properties = params
             String role = params.authority
             authority.authority='ROLE_'+role.toUpperCase() 
             String newRole =authority.authority
             def rms = Requestmap.findAllByConfigAttributeLike('%'+oldRole+'%')
             rms.each{it.configAttribute=it.configAttribute.replace(oldRole,newRole);it.validate();}
            if(authority.save()) {
                redirect(action:show,id:authority.id)
            }
            else {
                render(view:'edit',model:[authority:authority])
            }
        }
        else {
            flash.message = "Authority not found with id ${params.id}"
            redirect(action:edit,id:params.id)
        }
    }

    def create = {
        def authority = new Authority()
        authority.authority=""
        authority.properties = params
        return ['authority':authority]
    }
	
	/** Authority save action*/
    def save = {
        def authority = new Authority()
        String au=params.authority
        authority.properties = params
        //here translate user's input to the required Acegi format.
        authority.authority='ROLE_'+au.toUpperCase() 
        if(authority.save()) {
            redirect(action:show,id:authority.id)
        }
        else {
            render(view:'create',model:[authority:authority])
        }
    }

}